import org::eclipse::emf::ecore;
import org::applause::applausedsl::applauseDsl;

extension org::eclipse::xtend::util::stdlib::io;
extension templates::MetamodelExtensions;


// Objective C language support

cached ProjectClass projectClass(String name):
	JAVA templates.Extensions.createProjectClass(java.lang.String);

String use(String name):
	use(projectClass(name));

String use(ProjectClass projectClass):
	JAVA templates.Extensions.use(org.applause.applausedsl.applauseDsl.ProjectClass);

Void useImportBag(Set[ProjectClass] bag):
	JAVA templates.Extensions.useImportBag(java.util.Set);

objcImports(Collection[String] classNames):
	classNames.toSet().remove(null).remove("").collect(e|"#import \"" + e + '.h";').toString("\n");

create Set[ProjectClass] bagHeaderImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

create Set[ProjectClass] bagModuleImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

Collection[ProjectClass] withoutBuiltIns(Collection[ProjectClass] classes):
	classes.reject(e|e.name.startsWith("UI") || e.name.startsWith("NS"));

List[ProjectClass] headerImports(ProjectClass class):
	class.bagHeaderImports().withoutBuiltIns().without({class}).sortBy(e|e.name);

List[ProjectClass] moduleImports(ProjectClass class):
	{class, class.bagModuleImports().withoutBuiltIns().without(class.bagHeaderImports()).without({class}).sortBy(e|e.name)}.flatten();

h(ProjectClass class):
	useImportBag(class.bagHeaderImports()) -> (class.name + ".h");

m(ProjectClass class):
	useImportBag(class.bagModuleImports()) -> (class.name + ".m");

objc_Call(String target, String methodName, List[String] paramNames, List[String] paramValues):
	"[" + target + " " + methodName + paramNames.objc_MethodParamValues(paramValues) + "]";

objc_Call(String target, String methodName):
	target.objc_Call(methodName, {}, {});

objc_Call(ProjectClass class, String methodName, List[String] paramNames, List[String] paramValues):
	"[" + use(class) + " " + methodName + paramNames.objc_MethodParamValues(paramValues) + "]";

objc_Init(ProjectClass class, List[String] paramNames, List[String] paramValues):
	("[" + use(class) + " alloc]").objc_Call("init", paramNames, paramValues);

objc_Init(ProjectClass class):
	class.objc_Init({}, {});

objc_New(ProjectClass class, List[String] paramNames, List[String] paramValues):
	class.objc_Init(paramNames, paramValues).objc_Call("autorelease");

objc_New(ProjectClass class):
	class.objc_New({}, {});

objc_MethodParamNames(List[String] names):
	names.isEmpty ? {} : {"With" + names.first().toFirstUpper(), names.withoutFirst()}.flatten();

objc_MethodParamSignatures(List[String] names, List[String] types):
	names.isEmpty ? "" :
		(let n = names.objc_MethodParamNames() :
					0.upTo(n.size - 1).collect(i|n.get(i)+ ":(" + types.get(i) + ")" + names.get(i)).toString(" "));

objc_MethodParamValues(List[String] names, List[String] values):
	names.isEmpty ? "" :
		(let n = names.objc_MethodParamNames() :
					0.upTo(n.size - 1).collect(i|n.get(i)+ ":" + values.get(i)).toString(" "));

objc_MethodSignature(ProjectClass class, String modifier, String methodName, String returnType, List[String] paramNames, List[String] paramTypes):
	modifier + " (" + returnType + ") " + methodName + paramNames.objc_MethodParamSignatures(paramTypes);

statements(Collection[String] strings):
	strings.without({null}).collect(e|e + ";").toString("\n");



/* Mapping Model Object -> Objective-C class */

class(View this):
	projectClass(this.name.toFirstUpper() + "ViewController");

class(CustomView this):
	this.projectClass;

class(Type this):
	projectClass(this.name);

class(TabView view):
	projectClass("UITabBarController");


/* Views */

viewFactory(Application app):
	projectClass(app.name + "Views");

//TODO: rename Provider -> Method?
objcProviderMethodName(View view):
	"create" + view.name.toFirstUpper();

objcInitSignature(View view):
	view.class().objc_MethodSignature(
		"-", "init", "id",
		view.parameters().name,
		view.parameterTypes());

objcInitCall(View view, List[String] params):
	view.class().objc_Init(view.parameters().name, params);

objcProviderMethodSignature(View view):
	view.class().objc_MethodSignature(
		"+", view.objcProviderMethodName(),
		view.class().use() + " *",
		view.parameters().name,
		view.parameterTypes());

//TODO: potentially confusing to call this also Provider, maybe ViewFactory?
objcProviderMethodCall(ViewCall call, String kvcTarget, String kvcPrefix):
	call.application().viewFactory().objc_Call(
		call.view.objcProviderMethodName(), 
		call.view.parameters().name,
		call.parameters().resolveToProvider());



objcProviderMethodName(ContentProvider this):
	"providerFor" + name.toFirstUpper();




String replaceSettings(String string):
	JAVA templates.Extensions.replaceSettings(java.lang.String);


resolveToValue(Void this):
	"nil";

resolveToValue(ScopeName this):
	this.ivar() + ".content";

resolveToValue(CollectionIterator this):
	this.name;



resolveToValue(Expression this):
	"<resolveToValue is abstract for: " + this + ">";

resolveToValue(StringLiteral this):
	this.value.replaceSettings();

resolveToValue(StringConcat this):
	'[NSString stringWithFormat:@"' 
		+ values.collect(e|"%@").toString("") + '", '
		+ values.resolveToValue().toString(", ") + "]";

resolveToValue(StringUrlConform this):
	'[' + value.resolveToValue() 
	    + ' stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]';
	
resolveToValue(StringReplace this):
	'[' + value.resolveToValue() 
	    + ' stringByReplacingOccurrencesOfString:' + match.resolveToValue()
	    + ' withString:' + replacement.resolveToValue() + ']';

resolveToValue(StringSplit this):
	"[" + value.resolveToValue()
	    + " componentsSeparatedByString:"
	    + delimiter.resolveToValue() + "]";

resolveToValue(CollectionLiteral this):
	'[NSArray arrayWithObjects:' + items.collect(e|e.resolveToValue()).toString(", ") + ", nil]";

resolveToValue(ObjectReference this):
	tail == null ? this.object.resolveToValue()
	             : ( '[' + this.object.resolveToValue() 
	                     + ' valueFor' + ((tail.keyPath().size > 1) ? 'KeyPath:' : 'Key:')
	                     + tail.objcKeyPath() + ']' );





resolveToProvider(ScopeName this):
	this.ivar();

resolveToProvider(CollectionIterator this):
	'[' + use('SimpleContentProvider') + ' providerWithContent:' + this.name + ' name:@"' + this.name + '"]';
	
resolveToProvider(Expression this):
	'[' + use('SimpleContentProvider') + ' providerWithContent:' + this.resolveToValue() + ' name:@""]';

resolveToProvider(ProviderConstruction this): // TODO: rename to ProviderCall?
	"<resolveToProvider is abstract for: " + this + ">";

resolveToProvider(SimpleProviderConstruction this): // TODO: ProviderReference?
	this.expression.resolveToProvider();

// TODO: ComplexProviderConstruction.provider, ViewCall.view are similar -> check similar naming conventions for both

resolveToProvider(ComplexProviderConstruction this): // TODO: ProviderConstructionCall?
	this.application().sharedProviderFactory().objc_Call(
		provider.objcProviderMethodName(),
		provider.parameters().name,
		parameterValues().resolveToProvider()
	);

resolveToProvider(ObjectReference this):
	this.tail == null
		? object.resolveToProvider()
		: ("ContentProvider+Nested".use() -> 'ContentProvider'.objc_Call(
				'nestedContentProvider',
				{ 'contentProvider', 'keyPath' },
				{ object.resolveToProvider(), tail.objcKeyPath() }));



/* Assigning expressions */

assignment(Void this, String targetObject, String targetProperty):
	'';

assignment(ScalarExpression this, String targetObject, String targetProperty):
	targetObject + "." + targetProperty + " = " + resolveToValue() + ";";

assignment(Binding this, String targetObject, String targetProperty):
	'[fBindings bind:' + target.object.resolveToProvider() + ' property:@"content.' + target.tail.keyPath().toString('.') + '" to:' + targetObject + ' property:@"' + targetProperty + '"];';



/* TableView */

constant(TableViewStyle style):
	"UITableViewStyle" + style.name;

constant(CellType type):
	"UITableViewCellStyle" + type.literal;

constant(CellAccessory ac):
	switch(ac.name) {
		case 'Link' : 'UITableViewCellAccessoryDisclosureIndicator'
		case 'Detail' : 'UITableViewCellAccessoryDetailDisclosureButton'
		case 'Check' : 'UITableViewCellAccessoryCheckmark'
		default : 'UITableViewCellAccessoryNone'
	};


index(EObject obj, xpand2::Type type):
	obj.eContainer().eContents().select(e|type.isInstance(e)).indexOf(obj) + 1;

idname(StringLiteral str):
	str.value.split(" ").toFirstUpper().toString("").toFirstLower().replaceAll("[^a-zA-Z]", "");

idname(Cell cell):
	cell.iterator != null
		? cell.iterator.name
		: (StringLiteral.isInstance(cell.text)
			? ((StringLiteral)cell.text).idname()
			: ('s' + cell.eContainer().index(Section) + 'c' + cell.index(Cell)));

//TOOD: cell is handed in to calculate unique cell selector name for ViewCall - there has to be a better way
action(ViewAction this, Cell cell):
	throwError("action not supported for " + this);

action(ViewCall call, Cell cell):
	'[' + "SelectorAction".use() + ' actionWithObject:self selector:@selector(' + cell.idname() + 'CellSelected:)]';

action(Selector sel, Cell cell):
	'[' + "SelectorAction".use() + ' actionWithObject:self selector:@selector(' + sel.name + ')]';

providers(View view):
	view.parameters();
	
providers(TableView view):
	{ view.parameters(), view.variables }.flatten();

type(ScopeName param):
	'ContentProvider'.use() + " *";

ivar(ScopeName param):
	"f" + param.name.toFirstUpper();


// Parameter handling

// simulates parameter list, at the moment there can be only 0/1 parameters
// remove with http://ralfebert.lighthouseapp.com/projects/67904/tickets/57-support-for-multiple-parameters
List[Parameter] parameters(View this):
	{ parameter }.remove(null);

List[Parameter] parameters(ContentProvider this):
	{ parameter }.remove(null);

List[Parameter] parameterTypes(View view):
	view.parameters().collect(e|"ContentProvider".use() + " *");

List[ProviderConstruction] parameters(ViewCall view):
	{ view.parameter }.remove(null);

//TODO: parameters vs. argument vs. parameterValues(Bindings?)

List[Expression] parameterValues(ComplexProviderConstruction this):
	{ this.argument }.remove(null);



// Building section and cells

cellClass(Cell cell):
	cell.image != null ? use('ImageCell') : use('BoxCell');

String shortName(ViewContentElement this):
	Cell.isInstance(this) ? "cell" : "section";

String targetType(ViewContentElement this):
	Cell.isInstance(this) ? use("UITableViewCell") : use("Section");

String objcConstruct(ViewContentElement this):
	"<objcConstruct is abstract for: " + this + ">";

objcConstruct(Cell cell):
	 cell.cellClass() + ' *cell = [[[' + cell.cellClass() + ' alloc] initWithStyle:' + cell.type.constant() + " reuseIdentifier:nil] autorelease];\n"
	 + cell.text.assignment('cell.textLabel', 'text')
	 + cell.detailText.assignment('cell.detailTextLabel', 'text')
	 + cell.image.assignment('cell', 'imageUrl')
	 + ((cell.accessory.ordinal() == 0 && cell.action != null) ? 'cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;\n' : "")
	 + ((cell.accessory.ordinal() > 0) ? 'cell.accessoryType = ' + cell.accessory.constant() + ";\n" : "")
	 + ((cell.action != null) ? 'cell.onTouch = ' + action(cell.action, cell) + ";\n" : "")
	 + ((cell.iterator != null) ? 'cell.data = ' + cell.iterator.resolveToValue() + ';\n' : "[self cell:cell];\n");

objcConstruct(Section section):
	(section.iterator != null ? use('Section') + " *section = " : "") 
	 + '[self section' + (section.title == null ? '' : 'WithTitle:' + section.title.resolveToValue()) + '];\n'
	 + section.cells.objcSetup().toString("\n");

objcConstructPlaceholder(ViewContentElement e):
	"[self " + e.shortName() + "s:@selector(" + e.iterator.name + e.shortName().toFirstUpper() + ":) " +
				((Section.isInstance(e.eContainer()) && ((Section)(e.eContainer())).iterator != null)
					? ("forList:" + e.iterator.collection.resolveToValue())
					: ("forContentProvider:" + e.iterator.collection.resolveToProvider())
				) + "];";

objcSetup(ViewContentElement this):
	 let code = (iterator != null ? objcConstructPlaceholder() : objcConstruct())
	          : Cell.isInstance(this) ? "{\n" + code + "\n}\n" : code; 



/* Providers */
providerFactory(Application app):
	projectClass(app.name + "Providers");

sharedProviderFactory(Application app):
	"[" + app.providerFactory().use() + " sharedProviders]";

applicationDelegate(Application app):
	projectClass(app.name + "AppDelegate");

class(ContentProviderImplementation this):
	Void;

class(UrlContentProviderImplementation this):
	projectClass("UrlContentProvider");

class(CustomContentProviderImplementation this):
	projectClass(this.providerClass.name);

ivar(ContentProvider provider):
	"f" + provider.name.toFirstUpper();




objcType(Type this):
	throwError("<objcType not supported for " + this + ">");

objcType(SimpleType type):
	type.platformType + " *";

objcType(Entity type):
	type.runtimeType ? type.name + " *" : "id";


variable(Type this, String name):
	this.objcType() + (this.objcType().endsWith("*") ? "" : " ") + name;




type(Cell this):
	type.toString().toFirstUpper();
	
firstCell(TableView this):
	sections.first().cells.first();

Boolean hasBindings(EObject this):
	Binding.isInstance(this) || this.eContents().exists(e|((EObject)e).hasBindings());

List[String] keyPath(ObjectReference this):
	tail == null ? {object.name} : {object.name}.addAll(tail.keyPath());

objcKeyPath(ObjectReference this):
	'@"' + keyPath().toString(".") + '"';

List[String] keyPath(ObjectReference this, String kvcPrefix):
	let head = (kvcPrefix != "" ? {kvcPrefix} : {}):
		head.addAll(keyPath().withoutFirst());

methodSignature(ContentProvider p):
	'- (' + use('ContentProvider') + ' *) providerFor' + p.name + (
		p.parameter != null ? ':(id)' + p.parameter.name : '') 
	;
	
allProviders(Application this):
	model().elements.typeSelect(ContentProvider);
	
allViews(Application this):
	model().elements.typeSelect(View);
	
allViewClasses(Application this):
	model().elements.typeSelect(View).removeAll(model().elements.typeSelect(TabView));