import org::eclipse::emf::ecore;
import org::applause::applausedsl::applauseDsl;

extension templates::MetamodelExtensions;


// Objective C imports
// While generating files, imports are collected in a list for header and module,
// calling use() for String or ProjectClass adds the class to the list of imports

cached ProjectClass projectClass(String name):
	JAVA templates.Extensions.createProjectClass(java.lang.String);

String use(String name):
	use(projectClass(name));

String use(ProjectClass projectClass):
	JAVA templates.Extensions.use(org.applause.applausedsl.applauseDsl.ProjectClass);

Void useImportBag(Set[ProjectClass] bag):
	JAVA templates.Extensions.useImportBag(java.util.Set);

create Set[ProjectClass] bagHeaderImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

create Set[ProjectClass] bagModuleImports (ProjectClass class):
	((List[ProjectClass]) {}).toSet();

Collection[ProjectClass] withoutBuiltIns(Collection[ProjectClass] classes):
	classes.reject(e|e.name.startsWith("UI") || e.name.startsWith("NS"));

List[ProjectClass] headerImports(ProjectClass class):
	class.bagHeaderImports().withoutBuiltIns().without({class}).sortBy(e|e.name);

List[ProjectClass] moduleImports(ProjectClass class):
	{class, class.bagModuleImports().withoutBuiltIns().without(class.bagHeaderImports()).without({class}).sortBy(e|e.name)}.flatten();

h(ProjectClass class):
	useImportBag(class.bagHeaderImports()) -> (class.name + ".h");

m(ProjectClass class):
	useImportBag(class.bagModuleImports()) -> (class.name + ".m");



// Scope bindings
Void scopeStart():
	JAVA templates.Extensions.scopeStart();

Void scopeEnd():
	JAVA templates.Extensions.scopeEnd();

String scopeBind(EObject obj, String name):
	JAVA templates.Extensions.scopeBind(org.eclipse.emf.ecore.EObject, java.lang.String);

String internalScopeGet(EObject obj):
	JAVA templates.Extensions.scopeGet(org.eclipse.emf.ecore.EObject);

scopeName(EObject obj):
	let name = obj.internalScopeGet() : (name == null ? "<" + obj + " not bound in current scope>" : name);



// Objective C Method signatures and calls

toIdentifier(String this):
	split(" ").toFirstUpper().toString("").toFirstLower().replaceAll("[^a-zA-Z]", "");

objc(String this):
	'@"' + this + '"';

// [target methodNameWithParam1:value1 param2:value2 ...]
objc_Call(String target, String methodName, List[String] paramNames, List[String] paramValues):
	"[" + target + " " + methodName + paramNames.objc_MethodParamValues(paramValues) + "]";

// [target methodName]
objc_Call(String target, String methodName):
	target.objc_Call(methodName, {}, {});

// [Class methodNameWithParam1:value1 param2:value2 ...]
objc_Call(ProjectClass class, String methodName, List[String] paramNames, List[String] paramValues):
	objc_Call(use(class), methodName, paramNames, paramValues);

// [[Class alloc] initWithParam1:value2 param2:value2 ...]
objc_Init(ProjectClass class, List[String] paramNames, List[String] paramValues):
	("[" + use(class) + " alloc]").objc_Call("init", paramNames, paramValues);

// [[Class alloc] init]
objc_Init(ProjectClass class):
	class.objc_Init({}, {});

// [[[Class alloc] initWithParam1:value2 param2:value2 ...] autorelease]
objc_New(ProjectClass class, List[String] paramNames, List[String] paramValues):
	class.objc_Init(paramNames, paramValues).objc_Call("autorelease");

// [[[Class alloc] init] autorelease]
objc_New(ProjectClass class):
	class.objc_New({}, {});

// { "WithName1", "name2", ... }
objc_MethodParamNames(List[String] names):
	names.isEmpty ? {} : {"With" + names.first().toFirstUpper(), names.withoutFirst()}.flatten();

// WithName1:(Type1) name2:(Type2)name2 ...
objc_MethodParamSignatures(List[String] names, List[String] types):
	names.isEmpty ? "" :
		(let n = names.objc_MethodParamNames() :
					0.upTo(n.size - 1).collect(i|n.get(i)+ ":(" + types.get(i) + ")" + names.get(i)).toString(" "));

// WithName1:value1 name2:value2 ...
objc_MethodParamValues(List[String] names, List[String] values):
	names.isEmpty ? "" :
		(let n = names.objc_MethodParamNames() :
					0.upTo((n.size < values.size ? n.size : values.size) - 1).collect(i|n.get(i)+ ":" + values.get(i)).toString(" "));

// modifier (returnType) methodNameWithParam1:(Type1)param1 param2:(Type2)param2
objc_MethodSignature(String modifier, String methodName, String returnType, List[String] paramNames, List[String] paramTypes):
	modifier + " (" + returnType + ") " + methodName + paramNames.objc_MethodParamSignatures(paramTypes);



/* Mapping to Objective C names and classes */

class(View this):
	projectClass(this.name.toFirstUpper() + "ViewController");

class(CustomView this):
	this.projectClass;

class(Type this):
	projectClass(this.name);

class(TabView view):
	projectClass("UITabBarController");

class(ContentProviderImplementation this):
	"<Abstract " + this + ">";

class(UrlContentProviderImplementation this):
	projectClass("UrlContentProvider");

class(CustomContentProviderImplementation this):
	projectClass(this.providerClass.name);

ivar(ContentProvider provider):
	"f" + provider.name.toFirstUpper();

ivar(Named this):
	"f" + this.name.toFirstUpper();

objcType(Named this):
	use('ContentProvider') + " *";



/* Parameter handling */

List[Parameter] parameterTypes(ParameterizedModelElement this):
	parameters.definitions.collect(e|"ContentProvider".use() + " *");

factory(ParameterizedModelElement this):
	"<factory is abstract for: " + this + ">";

methodName(ParameterizedModelElement this):
	"<methodName is abstract for: " + this + ">";

call(ParameterizedCall this):
	target.factory().objc_Call(
		target.methodName(),
		target.parameters.definitions.name,
		parameters.values.resolveToProvider());



/* Expression helpers */

List[String] keyPath(ObjectReference this):
	tail == null ? {object.name} : {object.name}.addAll(tail.keyPath());

objcKeyPath(ObjectReference this):
	keyPath().toString(".").objc();



/* Views */

factory(View this):
	application().viewFactory().use();

methodName(View view):
	"create" + view.name.toFirstUpper();

initSignature(View this):
	objc_MethodSignature(
		"-", "init", "id",
		parameters.definitions.name,
		parameterTypes());

init(View view, List[String] params):
	view.class().objc_Init(view.parameters.definitions.name, params);

callSignature(View view):
	objc_MethodSignature(
		"+", view.methodName(),
		view.class().use() + " *",
		view.parameters.definitions.name,
		view.parameterTypes());



/* Content Provider */

factory(ContentProvider this):
	"[" + application().providerFactory().use() + " sharedProviders]";

methodName(ContentProvider this):
	"providerFor" + name.toFirstUpper();

callSignature(ContentProvider this):
	objc_MethodSignature(
		"-", methodName(),
		use('ContentProvider') + " *",
		parameters.definitions.name,
		parameterTypes());



/* Resolving expressions to a value */

resolveToValue(Void this):
	"nil";

resolveToValue(Named this):
	this.scopeName() + ".content";

resolveToValue(CollectionIterator this):
	this.scopeName();

resolveToValue(Expression this):
	"<resolveToValue is abstract for: " + this + ">";

String replaceSettings(String string):
	JAVA templates.Extensions.replaceSettings(java.lang.String);

resolveToValue(StringLiteral this):
	this.value.replaceSettings();

resolveToValue(StringConcat this):
	'[NSString stringWithFormat:@"'
		+ values.collect(e|"%@").toString("") + '", '
		+ values.resolveToValue().toString(", ") + "]";

resolveToValue(StringUrlConform this):
	'[' + value.resolveToValue()
		+ ' stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]';

resolveToValue(StringReplace this):
	'[' + value.resolveToValue()
		+ ' stringByReplacingOccurrencesOfString:' + match.resolveToValue()
		+ ' withString:' + replacement.resolveToValue() + ']';

resolveToValue(StringSplit this):
	"[" + value.resolveToValue()
		+ " componentsSeparatedByString:"
		+ delimiter.resolveToValue() + "]";

resolveToValue(CollectionLiteral this):
	'[NSArray arrayWithObjects:' + items.collect(e|e.resolveToValue()).toString(", ") + ", nil]";

resolveToValue(ObjectReference this):
	tail == null ? this.object.resolveToValue()
				: ( '[' + this.object.resolveToValue()
						+ ' valueFor' + ((tail.keyPath().size > 1) ? 'KeyPath:' : 'Key:')
						+ tail.objcKeyPath() + ']' );



/* Resolving expressions to a content provider */

resolveToProvider(Named this):
	this.scopeName();

resolveToProvider(CollectionIterator this):
	'[' + use('SimpleContentProvider') + ' providerWithContent:' + this.name + ' name:' + this.name.objc() + ']';

resolveToProvider(Expression this):
	'[' + use('SimpleContentProvider') + ' providerWithContent:' + this.resolveToValue() + ' name:@""]';

resolveToProvider(ContentProviderCall this):
	this.call();

resolveToProvider(ObjectReference this):
	this.tail == null
		? object.resolveToProvider()
		: ("ContentProvider+Nested".use() -> 'ContentProvider'.objc_Call(
				'nestedContentProvider',
				{ 'contentProvider', 'keyPath' },
				{ object.resolveToProvider(), tail.objcKeyPath() }));



/* Assigning expression values to variables */

assignment(Void this, String targetObject, String targetProperty):
	'';

assignment(ScalarExpression this, String targetObject, String targetProperty):
	targetObject + "." + targetProperty + " = " + resolveToValue() + ";";

assignment(Binding this, String targetObject, String targetProperty):
	'[fBindings bind:' + target.object.resolveToProvider() + ' property:@"content.' + target.tail.keyPath().toString('.') + '" to:' + targetObject + ' property:' + targetProperty.objc() + '];';



/* TableView */

constant(TableViewStyle style):
	"UITableViewStyle" + style.name;

constant(CellType type):
	"UITableViewCellStyle" + type.literal;

constant(CellAccessory ac):
	switch(ac.name) {
		case 'Link' : 'UITableViewCellAccessoryDisclosureIndicator'
		case 'Detail' : 'UITableViewCellAccessoryDetailDisclosureButton'
		case 'Check' : 'UITableViewCellAccessoryCheckmark'
		default : 'UITableViewCellAccessoryNone'
	};

index(EObject obj, xpand2::Type type):
	obj.eContainer().eContents().select(e|type.isInstance(e)).indexOf(obj) + 1;

idname(StringLiteral str):
	str.value.toIdentifier();

idname(Cell cell):
	cell.iterator != null
		? cell.iterator.name   // 1) use name of cell.iterator if present
		: (StringLiteral.isInstance(cell.text)
			? ((StringLiteral)cell.text).idname()    // 2) use text if string literal if present
			: ('s' + cell.eContainer().index(Section) + 'c' + cell.index(Cell)));   // 3) fallback: use section/cell index

providers(TableView view):
	{ view.parameters.definitions, view.variables }.flatten();



/* TableView: Section and Cell */

section(Cell cell):
	(Section) cell.eContainer();

cellClass(Cell cell):
	cell.image != null ? use('ImageCell') : use('BoxCell');

String shortName(ViewContentElement this):
	Cell.isInstance(this) ? "cell" : "section";

String targetType(ViewContentElement this):
	Cell.isInstance(this) ? use("UITableViewCell") : use("Section");

String objcConstruct(ViewContentElement this):
	"<objcConstruct is abstract for: " + this + ">";

objcConstruct(Cell cell):
	cell.cellClass() + ' *cell = [[[' + cell.cellClass() + ' alloc] initWithStyle:' + cell.type.constant() + " reuseIdentifier:nil] autorelease];\n"
	+ cell.text.assignment('cell.textLabel', 'text')
	+ cell.detailText.assignment('cell.detailTextLabel', 'text')
	+ cell.image.assignment('cell', 'imageUrl')
	+ ((cell.accessory.ordinal() == 0 && cell.action != null) ? 'cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;\n' : "")
	+ ((cell.accessory.ordinal() > 0) ? 'cell.accessoryType = ' + cell.accessory.constant() + ";\n" : "")
	+ ((cell.action != null) ? 'cell.onTouch = ' + cell.action.objcCall() + ";\n" : "")
	+ ((cell.iterator != null) ? 'cell.data = ' + cell.iterator.resolveToValue() + ';\n' : "[self cell:cell];\n");

objcConstruct(Section section):
	(section.iterator != null ? use('Section') + " *section = " : "")
	+ '[self section' + (section.title == null ? '' : 'WithTitle:' + section.title.resolveToValue()) + '];\n'
	+ section.cells.objcSetup().toString("\n");

objcConstructPlaceholder(ViewContentElement e):
	"[self " + e.shortName() + "s:@selector(" + e.iterator.name + e.shortName().toFirstUpper() + ":) " +
				((Section.isInstance(e.eContainer()) && ((Section)(e.eContainer())).iterator != null)
					? ("forList:" + e.iterator.collection.resolveToValue())
					: ("forContentProvider:" + e.iterator.collection.resolveToProvider())
				) + "];";

objcSetup(ViewContentElement this):
	let code = (iterator != null ? objcConstructPlaceholder() : objcConstruct())
			: Cell.isInstance(this) ? "{\n" + code + "\n}\n" : code;

Boolean hasBindings(EObject this):
	Binding.isInstance(this) || this.eContents().exists(e|((EObject)e).hasBindings());



/* Actions */

actionSelectorName(Action this):
	"<actionSelectorName is abstract for: " + this + ">";

actionSelectorName(Selector sel):
	sel.name;

actionSelectorName(ViewCall call):
	((Cell)call.eContainer()).idname()  + 'CellSelected:';

objcCall(Action this):
	'[' + use("SelectorAction") + ' actionWithObject:self selector:@selector(' + this.actionSelectorName() + ')]';



/* Application */

allProviders(Application this):
	model().elements.typeSelect(ContentProvider);

allViews(Application this):
	model().elements.typeSelect(View);

viewFactory(Application app):
	projectClass(app.name + "Views");

providerFactory(Application app):
	projectClass(app.name + "Providers");

applicationDelegate(Application app):
	projectClass(app.name + "AppDelegate");
