«IMPORT org::applause::applausedsl::applauseDsl»

«EXTENSION templates::iphone::Extensions»
«EXTENSION templates::MetamodelExtensions»

«DEFINE main FOR Application-»
«EXPAND headerFile»
«EXPAND moduleFile»
«ENDDEFINE»


«DEFINE headerFile FOR Application»
«FILE viewFactory().h()-»
«EXPAND ObjC::Import FOREACH viewFactory().headerImports() ONFILECLOSE-»

@interface «use(viewFactory())» : NSObject {

}

«FOREACH allViews() AS view-»
«view.objcProviderMethodSignature()»;
«ENDFOREACH»

@end
«ENDFILE»
«ENDDEFINE»



«DEFINE moduleFile FOR Application»
«FILE viewFactory().m()-»
«EXPAND ObjC::Import FOREACH viewFactory().moduleImports() ONFILECLOSE-»

@implementation «use(viewFactory())»
«EXPAND viewFactoryMethod FOREACH allViews()»
@end
«ENDFILE»
«ENDDEFINE»



«DEFINE viewFactoryMethod FOR View»
«objcProviderMethodSignature()» {
	return «class().objc_New(parameters().name, parameters().name)»;
}
«ENDDEFINE»


«DEFINE viewFactoryMethod FOR TabView»
«objcProviderMethodSignature()» {
	UITabBarController *tabController = [[[UITabBarController alloc] init] autorelease];

«FOREACH tabs AS tab ITERATOR i-»
	UINavigationController *tab«i.counter1» = [«use("BrandedUIFactory")» createUINavigationControllerWithRootViewController:«(tab.view != null) ? tab.view.objcProviderMethodCall('', '') : "nil"»];
	tab«i.counter1».tabBarItem.title = «tab.title.expression('', '')»;
	«IF tab.icon != null-»
	tab«i.counter1».tabBarItem.image = [UIImage imageNamed:«tab.icon.expression('','')»];
	«ENDIF-»

«ENDFOREACH-»
	tabController.viewControllers = [NSArray arrayWithObjects:«FOREACH tabs AS tab ITERATOR i SEPARATOR ", "»tab«i.counter1»«ENDFOREACH», nil];

	return tabController;
}
«ENDDEFINE»
