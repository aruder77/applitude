grammar org.applause.applausedsl.ApplauseDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate applauseDsl "http://www.applause.org/applausedsl/ApplauseDsl"

Model:
	application=Application
	(elements+=ModelElement)*;

Application returns Application:
	"application" name=ID '{'
		( ('background:' background=ScalarExpression)?
		& ('view:' startView=ViewCall) )
	'}';

ModelElement:
	Type | ParameterizedModelElement;

// -------------------------------------------
// types

Type:
	SimpleType | Entity;

SimpleType:
	'type' name=ID 'mapsTo' platformType = STRING;

Entity:
	'entity' (runtimeType?='class')? name=ID ('extends' extends=[Entity])? '{'
		(properties+=Property)*
	'}';

Property:
	typeRef=TypeReference name=ID;

TypeReference:
	type=[Type] (many?='[]')?;

ProjectClass:
	'class' name=ID;

// -------------------------------------------
// names and references

Declaration:
	Parameter | Assignment | CollectionIterator;

Named:
	Declaration | Property;

ObjectReference hidden():
	object=[Declaration] tail=PropertyReference?;

PropertyReference returns ObjectReference:
	'.' object=[Property] tail=PropertyReference?;

// -------------------------------------------
// expressions

Expression:
	CollectionLiteral | CollectionFunction | StringLiteral | StringFunction | ObjectReference | ContentProviderCall | Binding;
	// defining this as what it is (ScalarExpression | CollectionExpression | ContentProviderCall)
	// would cause grammar errors because ObjectReference is ScalarExpression and CollectionExpression
	// the resulting model is corrected in ApplauseDslPostProcessor.ext

ScalarExpression:
	StringLiteral | StringFunction | ObjectReference | Binding;

StringLiteral:
	value=STRING;

StringFunction:
	{StringConcat} '(' (values+=ScalarExpression)+ ')' |
	{StringReplace} 'replace(' value=ScalarExpression ',' match=ScalarExpression ',' replacement=ScalarExpression ')' |
	{StringUrlConform} 'urlconform(' value=ScalarExpression ')';

Binding:
	'bind(' target=ObjectReference ')';

ImageExpression returns ScalarExpression:
	ScalarExpression;

CollectionExpression:
	CollectionLiteral | CollectionFunction | ObjectReference;

CollectionLiteral:
	'[' items+=ScalarExpression (',' items+=ScalarExpression)* ']';

CollectionFunction:
	{StringSplit} 'split(' value=ScalarExpression ',' delimiter=ScalarExpression ')';

CollectionIterator:
	'for' name=ID 'in' collection=CollectionExpression;

// -------------------------------------------
// parameters

Parameter:
	typeRef=TypeReference name=ID;

ParameterizedModelElement:
	View | ContentProvider;

ParameterizedCall:
	ViewCall | ContentProviderCall;

ParameterDefinitions:
	{ParameterDefinitions} ('(' definitions+=Parameter (',' definitions+=Parameter)* ')')?;

ParameterValues:
	{ParameterValues} '(' (values+=Expression (',' values+=Expression)*)? ')';

// -------------------------------------------
// content provider

ContentProvider:
	'contentprovider' name=ID
	parameters=ParameterDefinitions
	('returns'|storing?="stores") type=[Type] (many?='[]')?
	implementation=ContentProviderImplementation?;

ContentProviderImplementation:
	UrlContentProviderImplementation | CustomContentProviderImplementation;

enum SerializationFormat:
	XML | JSON;

UrlContentProviderImplementation:
	'fetches' format=SerializationFormat 'from' url=ScalarExpression ('selects' selection=ScalarExpression)?;

CustomContentProviderImplementation:
	providerClass=ProjectClass;

ContentProviderCall:
	target=[ContentProvider] parameters=ParameterValues;

Assignment:
	typeRef=TypeReference name=ID '=' value=ContentProviderCall;

// -------------------------------------------
// views

View:
	TabView | TableView | CustomView;

TabView:
	'tabview' name=ID parameters=ParameterDefinitions '{'
		(tabs += Tab)*
	'}';

Tab:
	'tab' '{'
		( ('title:' title=ScalarExpression)
		& ('icon:' icon=ImageExpression)?
		& ('view:' view=ViewCall)? )
	'}';

TableView:
	'tableview' name=ID parameters=ParameterDefinitions '{'
		(variables += Assignment)*

		( ('title:' title=ScalarExpression)?
		& ('titleImage:' titleImage=ImageExpression)?
		& ('style:' style=TableViewStyle)? )

		(sections+=Section)*
	'}';

enum TableViewStyle:
	Plain | Grouped;

ViewContentElement:
	Section | Cell;

Section:
	{Section} 'section' iterator=CollectionIterator? '{'
		('title:' title=ScalarExpression)?
		(cells+=Cell)*
	'}';

Cell:
	'cell' type=CellType iterator=CollectionIterator? '{'
		( ('text:' text=ScalarExpression)?
		& ('detailText:' detailText=ScalarExpression)?
		& ('image:' image=ScalarExpression)?
		& ('action:' action=Action)?
		& ('accessory:' accessory=CellAccessory)?)
	'}';

enum CellType:
	default = 'Default' |
	value1 = 'Value1' |
	value2 = 'Value2' |
	subtitle = 'Subtitle';

enum CellAccessory:
	None | Link | Detail | Check;

CustomView:
	'customview' name=ID parameters=ParameterDefinitions projectClass=ProjectClass;

// -------------------------------------------
// actions

Action:
	ViewCall | OpenURL | Selector;

ViewCall:
	target=[View] parameters=ParameterValues;

Selector:
	'@selector' '(' name=SelectorName ')';

SelectorName returns ecore::EString:
	ID (':' ID)* ':'?;

OpenURL:
	url=ScalarExpression;
