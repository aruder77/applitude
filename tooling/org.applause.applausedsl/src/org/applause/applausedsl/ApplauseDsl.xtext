grammar org.applause.applausedsl.ApplauseDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate applauseDsl "http://www.applause.org/applausedsl/ApplauseDsl"

Model:
	application=Application
	(elements+=ModelElement)*;

Application returns Application:
	"application" name=ID '{'
		( ('background:' background=ScalarExpression)?
		& ('view:' startView=ViewCall) )
	'}';
	
ModelElement:
	Type | ContentProvider | View;

// -------------------------------------------
// types

Type:
	SimpleType | Entity;

SimpleType:
	'type' name=ID 'mapsTo' platformType = STRING;
	
Entity:
	'entity' (runtimeType?='class')? name=ID ('extends' extends=[Entity])? '{'
		(properties+=TypedName)*
	'}';

TypeReference:
	type=[Type] (many?='[]')?;

ProjectClass:
	'class' name=ID;

// -------------------------------------------
// expressions

ScopeName:
	TypedName | CollectionIterator;

TypedName:
	typeRef=TypeReference name=ID;

//TODO: this pushes down the value attribute to TypedName
Assignment returns TypedName:
	typeRef=TypeReference name=ID '=' value=ProviderConstruction;

ObjectReference:
	object=[ScopeName] tail=NestedObjectReference?;
	
//workaround: NestedObjectReference as separate rule to guide the content 
//   assist parser technically could have been include in ObjectReference like
//   ObjectReference:
//     object=[PropertyPathPart] ('.' tail=ObjectReference)?;
NestedObjectReference returns ObjectReference:
	'.' object=[ScopeName] tail=NestedObjectReference?;

Expression:
	StringLiteral | StringFunction | CollectionLiteral | CollectionFunction | ObjectReference;

ScalarExpression:
	StringLiteral | StringFunction | ObjectReference;

StringLiteral:
	value=STRING;

StringFunction:
	{StringConcat} '(' (values+=ScalarExpression)+ ')' |
	{StringReplace} 'replace(' value=ScalarExpression ',' match=ScalarExpression ',' replacement=ScalarExpression ')' |
	{StringUrlConform} 'urlconform(' value=ScalarExpression ')';

ImageExpression returns ScalarExpression:
	ScalarExpression;

CollectionExpression:
	CollectionLiteral | CollectionFunction | ObjectReference;

CollectionLiteral:
	'[' items+=ScalarExpression (',' items+=ScalarExpression)* ']';

CollectionFunction:
	{StringSplit} 'split(' value=ScalarExpression ',' delimiter=ScalarExpression ')';

CollectionIterator:
	'for' name=ID 'in' collection=CollectionExpression;

// -------------------------------------------
// content provider

ContentProvider:
	'contentprovider' name=ID
	('(' parameter=TypedName ')')? 
	('returns'|storing?="stores") type=[Type] (many?='[]')?
	implementation=ContentProviderImplementation?;

ContentProviderImplementation:
	UrlContentProviderImplementation | CustomContentProviderImplementation;

enum SerializationFormat:
	XML | JSON;

UrlContentProviderImplementation:
	'fetches' format=SerializationFormat 'from' url=ScalarExpression ('selects' selection=ScalarExpression)?;

CustomContentProviderImplementation:
	providerClass=ProjectClass;

ProviderConstruction:
	{ComplexProviderConstruction} provider=[ContentProvider] '(' (argument=Expression)? ')' |
	{SimpleProviderConstruction} expression=Expression;

// -------------------------------------------
// views

View:
	TabView | TableView | CustomView;

TabView:
	'tabview' name=ID ('(' content=TypedName ')')? '{'
		(tabs += Tab)*
	'}';

Tab:
	'tab' '{'
		( ('title:' title=ScalarExpression)
		& ('icon:' icon=ImageExpression)?
		& ('view:' view=ViewCall)? )
	'}';

TableView:
	'tableview' name=ID ('(' content=TypedName ')')? '{'
		(variables += Assignment)*
		
		( ('title:' title=ScalarExpression)?
		& ('titleImage:' titleImage=ImageExpression)?
		& ('style:' style=TableViewStyle)? )
		
		(sections+=Section)*
	'}';

enum TableViewStyle:
	Plain | Grouped;

ViewContentElement:
	Section | Cell;

Section:
	{Section} 'section' iterator=CollectionIterator? '{'
		('title:' title=ScalarExpression)?
		(cells+=Cell)*
	'}';
	
Cell:
	'cell' type=CellType iterator=CollectionIterator? '{'
		( ('text:' text=ScalarExpression)?
		& ('detailText:' detailText=ScalarExpression)?
		& ('image:' image=ScalarExpression)?
		& ('action:' action=ViewAction)? 
		& ('accessory:' accessory=CellAccessory)?)
	'}';

enum CellType:
	default = 'Default' |
	value1 = 'Value1' |
	value2 = 'Value2' |
	subtitle = 'Subtitle';

enum CellAccessory:
	None | Link | Detail | Check;

CustomView:
	'customview' name=ID ('(' content=TypedName ')')? projectClass=ProjectClass;

// -------------------------------------------
// actions

ViewAction:
	ViewCall | ExternalOpen | Selector;

ViewCall:
	view=[View] '(' (provider=ProviderConstruction)? ')';

Selector:
	'@selector' '(' name=SelectorName ')';

SelectorName returns ecore::EString:
  ID (':' ID)* ':'?;

ExternalOpen:
	url=ScalarExpression;